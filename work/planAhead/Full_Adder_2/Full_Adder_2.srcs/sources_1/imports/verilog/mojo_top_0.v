/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    input [4:0] io_button,
    input [23:0] io_dip,
    output reg outA,
    output reg outB,
    output reg outC,
    input inSum,
    input inCout
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_btn_cond_out;
  reg [1-1:0] M_btn_cond_in;
  button_conditioner_2 btn_cond (
    .clk(clk),
    .in(M_btn_cond_in),
    .out(M_btn_cond_out)
  );
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_3 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  wire [1-1:0] M_bc_out;
  reg [1-1:0] M_bc_btn;
  button_control_4 bc (
    .clk(clk),
    .btn(M_bc_btn),
    .out(M_bc_out)
  );
  wire [3-1:0] M_delayclk_value;
  counter_5 delayclk (
    .clk(clk),
    .rst(rst),
    .value(M_delayclk_value)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    io_led = 24'h000000;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    M_btn_cond_in = io_button[0+0-:1];
    M_edge_detector_in = M_btn_cond_out;
    M_bc_btn = M_edge_detector_out;
    if (M_bc_out == 1'h0) begin
      io_led[0+7-:8] = 8'hff;
      outA = io_dip[16+0+0-:1];
      outB = io_dip[16+1+0-:1];
      outC = io_dip[16+3+0-:1];
      io_led[8+2+0-:1] = io_dip[16+0+0-:1];
      io_led[8+3+0-:1] = io_dip[16+1+0-:1];
      io_led[8+4+0-:1] = io_dip[16+3+0-:1];
    end else begin
      io_led[0+0+7-:8] = 8'h00;
      outA = M_delayclk_value[0+0-:1];
      outB = M_delayclk_value[1+0-:1];
      outC = M_delayclk_value[2+0-:1];
      io_led[8+2+0-:1] = M_delayclk_value[0+0-:1];
      io_led[8+3+0-:1] = M_delayclk_value[1+0-:1];
      io_led[8+4+0-:1] = M_delayclk_value[2+0-:1];
    end
    io_led[8+0+0-:1] = inSum;
    io_led[8+1+0-:1] = inCout;
  end
endmodule
