module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    output outA,
    output outB,
    output outC,
    input inSum,
    input inCout
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner btn_cond;
    edge_detector edge_detector(#RISE(1),#FALL(0));
    button_control bc;
    .rst(rst){
      counter delayclk(#SIZE(3),#DIV(26));
      }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    io_led = 3x{{8h00}};    // turn all io_led OFF
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    btn_cond.in = io_button[0];  // connect io_button to btn_cond input
    edge_detector.in = btn_cond.out;  // connect output of btn_cond to edge_detector
    bc.btn = edge_detector.out;  // connect output of edge_detector to button_control
    
    // manual mode
    if(bc.out == 0){
      io_led[0] = 8x{1}; // LEDs ON indicating manual mode
      outA = io_dip[2][0];
      outB = io_dip[2][1];
      outC = io_dip[2][3];
      io_led[1][2] = io_dip[2][0];
      io_led[1][3] = io_dip[2][1];
      io_led[1][4] = io_dip[2][3];
      }
    // auto mode
    else{
      io_led[0][7:0] = 8x{0}; // LEDs OFF indicating auto mode
      outA = delayclk.value[0];
      outB = delayclk.value[1];
      outC = delayclk.value[2];
      io_led[1][2] = delayclk.value[0];
      io_led[1][3] = delayclk.value[1];
      io_led[1][4] = delayclk.value[2];    
     }
    
     io_led[1][0] = inSum;
     io_led[1][1] = inCout;  
   
    
  }
}